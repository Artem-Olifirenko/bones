// Code generated by MockGen. DO NOT EDIT.
// Source: go.citilink.cloud/grpc-skeleton/internal/specs/grpcclient/gen/citilink/store/store/v1 (interfaces: StoreAPIClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storev1 "go.citilink.cloud/grpc-skeleton/internal/specs/grpcclient/gen/citilink/store/store/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStoreAPIClient is a mock of StoreAPIClient interface.
type MockStoreAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreAPIClientMockRecorder
}

// MockStoreAPIClientMockRecorder is the mock recorder for MockStoreAPIClient.
type MockStoreAPIClientMockRecorder struct {
	mock *MockStoreAPIClient
}

// NewMockStoreAPIClient creates a new mock instance.
func NewMockStoreAPIClient(ctrl *gomock.Controller) *MockStoreAPIClient {
	mock := &MockStoreAPIClient{ctrl: ctrl}
	mock.recorder = &MockStoreAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreAPIClient) EXPECT() *MockStoreAPIClientMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockStoreAPIClient) Filter(arg0 context.Context, arg1 *storev1.FilterRequest, arg2 ...grpc.CallOption) (*storev1.FilterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(*storev1.FilterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockStoreAPIClientMockRecorder) Filter(arg0, arg1 interface{}, arg2 ...interface{}) *StoreAPIClientFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockStoreAPIClient)(nil).Filter), varargs...)
	return &StoreAPIClientFilterCall{Call: call}
}

// StoreAPIClientFilterCall wrap *gomock.Call
type StoreAPIClientFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StoreAPIClientFilterCall) Return(arg0 *storev1.FilterResponse, arg1 error) *StoreAPIClientFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StoreAPIClientFilterCall) Do(f func(context.Context, *storev1.FilterRequest, ...grpc.CallOption) (*storev1.FilterResponse, error)) *StoreAPIClientFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StoreAPIClientFilterCall) DoAndReturn(f func(context.Context, *storev1.FilterRequest, ...grpc.CallOption) (*storev1.FilterResponse, error)) *StoreAPIClientFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindAll mocks base method.
func (m *MockStoreAPIClient) FindAll(arg0 context.Context, arg1 *storev1.FindAllRequest, arg2 ...grpc.CallOption) (*storev1.FindAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAll", varargs...)
	ret0, _ := ret[0].(*storev1.FindAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStoreAPIClientMockRecorder) FindAll(arg0, arg1 interface{}, arg2 ...interface{}) *StoreAPIClientFindAllCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStoreAPIClient)(nil).FindAll), varargs...)
	return &StoreAPIClientFindAllCall{Call: call}
}

// StoreAPIClientFindAllCall wrap *gomock.Call
type StoreAPIClientFindAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StoreAPIClientFindAllCall) Return(arg0 *storev1.FindAllResponse, arg1 error) *StoreAPIClientFindAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StoreAPIClientFindAllCall) Do(f func(context.Context, *storev1.FindAllRequest, ...grpc.CallOption) (*storev1.FindAllResponse, error)) *StoreAPIClientFindAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StoreAPIClientFindAllCall) DoAndReturn(f func(context.Context, *storev1.FindAllRequest, ...grpc.CallOption) (*storev1.FindAllResponse, error)) *StoreAPIClientFindAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSpaceIds mocks base method.
func (m *MockStoreAPIClient) GetSpaceIds(arg0 context.Context, arg1 *storev1.GetSpaceIdsRequest, arg2 ...grpc.CallOption) (*storev1.GetSpaceIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpaceIds", varargs...)
	ret0, _ := ret[0].(*storev1.GetSpaceIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpaceIds indicates an expected call of GetSpaceIds.
func (mr *MockStoreAPIClientMockRecorder) GetSpaceIds(arg0, arg1 interface{}, arg2 ...interface{}) *StoreAPIClientGetSpaceIdsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpaceIds", reflect.TypeOf((*MockStoreAPIClient)(nil).GetSpaceIds), varargs...)
	return &StoreAPIClientGetSpaceIdsCall{Call: call}
}

// StoreAPIClientGetSpaceIdsCall wrap *gomock.Call
type StoreAPIClientGetSpaceIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StoreAPIClientGetSpaceIdsCall) Return(arg0 *storev1.GetSpaceIdsResponse, arg1 error) *StoreAPIClientGetSpaceIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StoreAPIClientGetSpaceIdsCall) Do(f func(context.Context, *storev1.GetSpaceIdsRequest, ...grpc.CallOption) (*storev1.GetSpaceIdsResponse, error)) *StoreAPIClientGetSpaceIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StoreAPIClientGetSpaceIdsCall) DoAndReturn(f func(context.Context, *storev1.GetSpaceIdsRequest, ...grpc.CallOption) (*storev1.GetSpaceIdsResponse, error)) *StoreAPIClientGetSpaceIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTerminalSpaceIds mocks base method.
func (m *MockStoreAPIClient) GetTerminalSpaceIds(arg0 context.Context, arg1 *storev1.GetTerminalSpaceIdsRequest, arg2 ...grpc.CallOption) (*storev1.GetTerminalSpaceIdsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTerminalSpaceIds", varargs...)
	ret0, _ := ret[0].(*storev1.GetTerminalSpaceIdsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTerminalSpaceIds indicates an expected call of GetTerminalSpaceIds.
func (mr *MockStoreAPIClientMockRecorder) GetTerminalSpaceIds(arg0, arg1 interface{}, arg2 ...interface{}) *StoreAPIClientGetTerminalSpaceIdsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminalSpaceIds", reflect.TypeOf((*MockStoreAPIClient)(nil).GetTerminalSpaceIds), varargs...)
	return &StoreAPIClientGetTerminalSpaceIdsCall{Call: call}
}

// StoreAPIClientGetTerminalSpaceIdsCall wrap *gomock.Call
type StoreAPIClientGetTerminalSpaceIdsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StoreAPIClientGetTerminalSpaceIdsCall) Return(arg0 *storev1.GetTerminalSpaceIdsResponse, arg1 error) *StoreAPIClientGetTerminalSpaceIdsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StoreAPIClientGetTerminalSpaceIdsCall) Do(f func(context.Context, *storev1.GetTerminalSpaceIdsRequest, ...grpc.CallOption) (*storev1.GetTerminalSpaceIdsResponse, error)) *StoreAPIClientGetTerminalSpaceIdsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StoreAPIClientGetTerminalSpaceIdsCall) DoAndReturn(f func(context.Context, *storev1.GetTerminalSpaceIdsRequest, ...grpc.CallOption) (*storev1.GetTerminalSpaceIdsResponse, error)) *StoreAPIClientGetTerminalSpaceIdsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
