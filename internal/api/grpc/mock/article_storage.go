// Code generated by MockGen. DO NOT EDIT.
// Source: go.citilink.cloud/grpc-skeleton/internal (interfaces: ArticleStorage)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	internal "go.citilink.cloud/grpc-skeleton/internal"
	gomock "go.uber.org/mock/gomock"
)

// MockArticleStorage is a mock of ArticleStorage interface.
type MockArticleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockArticleStorageMockRecorder
}

// MockArticleStorageMockRecorder is the mock recorder for MockArticleStorage.
type MockArticleStorageMockRecorder struct {
	mock *MockArticleStorage
}

// NewMockArticleStorage creates a new mock instance.
func NewMockArticleStorage(ctrl *gomock.Controller) *MockArticleStorage {
	mock := &MockArticleStorage{ctrl: ctrl}
	mock.recorder = &MockArticleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleStorage) EXPECT() *MockArticleStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleStorage) Create(arg0, arg1 string, arg2 internal.Category, arg3 []string, arg4 bool) (*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleStorageMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *ArticleStorageCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleStorage)(nil).Create), arg0, arg1, arg2, arg3, arg4)
	return &ArticleStorageCreateCall{Call: call}
}

// ArticleStorageCreateCall wrap *gomock.Call
type ArticleStorageCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageCreateCall) Return(arg0 *internal.Article, arg1 error) *ArticleStorageCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageCreateCall) Do(f func(string, string, internal.Category, []string, bool) (*internal.Article, error)) *ArticleStorageCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageCreateCall) DoAndReturn(f func(string, string, internal.Category, []string, bool) (*internal.Article, error)) *ArticleStorageCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockArticleStorage) Delete(arg0 internal.ArticleId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleStorageMockRecorder) Delete(arg0 interface{}) *ArticleStorageDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleStorage)(nil).Delete), arg0)
	return &ArticleStorageDeleteCall{Call: call}
}

// ArticleStorageDeleteCall wrap *gomock.Call
type ArticleStorageDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageDeleteCall) Return(arg0 error) *ArticleStorageDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageDeleteCall) Do(f func(internal.ArticleId) error) *ArticleStorageDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageDeleteCall) DoAndReturn(f func(internal.ArticleId) error) *ArticleStorageDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockArticleStorage) Filter(arg0 []internal.Category, arg1 []string, arg2 bool) ([]*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockArticleStorageMockRecorder) Filter(arg0, arg1, arg2 interface{}) *ArticleStorageFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockArticleStorage)(nil).Filter), arg0, arg1, arg2)
	return &ArticleStorageFilterCall{Call: call}
}

// ArticleStorageFilterCall wrap *gomock.Call
type ArticleStorageFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageFilterCall) Return(arg0 []*internal.Article, arg1 error) *ArticleStorageFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageFilterCall) Do(f func([]internal.Category, []string, bool) ([]*internal.Article, error)) *ArticleStorageFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageFilterCall) DoAndReturn(f func([]internal.Category, []string, bool) ([]*internal.Article, error)) *ArticleStorageFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockArticleStorage) Get(arg0 internal.ArticleId) (*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArticleStorageMockRecorder) Get(arg0 interface{}) *ArticleStorageGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleStorage)(nil).Get), arg0)
	return &ArticleStorageGetCall{Call: call}
}

// ArticleStorageGetCall wrap *gomock.Call
type ArticleStorageGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageGetCall) Return(arg0 *internal.Article, arg1 error) *ArticleStorageGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageGetCall) Do(f func(internal.ArticleId) (*internal.Article, error)) *ArticleStorageGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageGetCall) DoAndReturn(f func(internal.ArticleId) (*internal.Article, error)) *ArticleStorageGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockArticleStorage) Update(arg0 internal.ArticleId, arg1, arg2 string, arg3 internal.Category, arg4 []string, arg5 bool) (*internal.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*internal.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockArticleStorageMockRecorder) Update(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *ArticleStorageUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleStorage)(nil).Update), arg0, arg1, arg2, arg3, arg4, arg5)
	return &ArticleStorageUpdateCall{Call: call}
}

// ArticleStorageUpdateCall wrap *gomock.Call
type ArticleStorageUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageUpdateCall) Return(arg0 *internal.Article, arg1 error) *ArticleStorageUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageUpdateCall) Do(f func(internal.ArticleId, string, string, internal.Category, []string, bool) (*internal.Article, error)) *ArticleStorageUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageUpdateCall) DoAndReturn(f func(internal.ArticleId, string, string, internal.Category, []string, bool) (*internal.Article, error)) *ArticleStorageUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
