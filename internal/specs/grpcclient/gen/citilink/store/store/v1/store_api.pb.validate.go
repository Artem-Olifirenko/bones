// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: citilink/store/store/v1/store_api.proto

package storev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FindAllRequestMultiError,
// or nil if none found.
func (m *FindAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithHidden

	if len(errors) > 0 {
		return FindAllRequestMultiError(errors)
	}

	return nil
}

// FindAllRequestMultiError is an error wrapping multiple validation errors
// returned by FindAllRequest.ValidateAll() if the designated constraints
// aren't met.
type FindAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAllRequestMultiError) AllErrors() []error { return m }

// FindAllRequestValidationError is the validation error returned by
// FindAllRequest.Validate if the designated constraints aren't met.
type FindAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAllRequestValidationError) ErrorName() string { return "FindAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAllRequestValidationError{}

// Validate checks the field values on FindAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAllResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAllResponseMultiError, or nil if none found.
func (m *FindAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindAllResponseValidationError{
						field:  fmt.Sprintf("Stores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindAllResponseValidationError{
						field:  fmt.Sprintf("Stores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindAllResponseValidationError{
					field:  fmt.Sprintf("Stores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return FindAllResponseMultiError(errors)
	}

	return nil
}

// FindAllResponseMultiError is an error wrapping multiple validation errors
// returned by FindAllResponse.ValidateAll() if the designated constraints
// aren't met.
type FindAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAllResponseMultiError) AllErrors() []error { return m }

// FindAllResponseValidationError is the validation error returned by
// FindAllResponse.Validate if the designated constraints aren't met.
type FindAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAllResponseValidationError) ErrorName() string { return "FindAllResponseValidationError" }

// Error satisfies the builtin error interface
func (e FindAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAllResponseValidationError{}

// Validate checks the field values on FilterRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterRequestMultiError, or
// nil if none found.
func (m *FilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterRequestValidationError{
						field:  fmt.Sprintf("Filters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterRequestValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WithHidden

	// no validation rules for WithNeedToFill

	if len(errors) > 0 {
		return FilterRequestMultiError(errors)
	}

	return nil
}

// FilterRequestMultiError is an error wrapping multiple validation errors
// returned by FilterRequest.ValidateAll() if the designated constraints
// aren't met.
type FilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequestMultiError) AllErrors() []error { return m }

// FilterRequestValidationError is the validation error returned by
// FilterRequest.Validate if the designated constraints aren't met.
type FilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequestValidationError) ErrorName() string { return "FilterRequestValidationError" }

// Error satisfies the builtin error interface
func (e FilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequestValidationError{}

// Validate checks the field values on FilterResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FilterResponseMultiError,
// or nil if none found.
func (m *FilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Stores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterResponseValidationError{
						field:  fmt.Sprintf("Stores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterResponseValidationError{
					field:  fmt.Sprintf("Stores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return FilterResponseMultiError(errors)
	}

	return nil
}

// FilterResponseMultiError is an error wrapping multiple validation errors
// returned by FilterResponse.ValidateAll() if the designated constraints
// aren't met.
type FilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterResponseMultiError) AllErrors() []error { return m }

// FilterResponseValidationError is the validation error returned by
// FilterResponse.Validate if the designated constraints aren't met.
type FilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterResponseValidationError) ErrorName() string { return "FilterResponseValidationError" }

// Error satisfies the builtin error interface
func (e FilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterResponseValidationError{}

// Validate checks the field values on GetSpaceIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpaceIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpaceIdsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpaceIdsRequestMultiError, or nil if none found.
func (m *GetSpaceIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpaceIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSpaceIdsRequestMultiError(errors)
	}

	return nil
}

// GetSpaceIdsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpaceIdsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpaceIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpaceIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpaceIdsRequestMultiError) AllErrors() []error { return m }

// GetSpaceIdsRequestValidationError is the validation error returned by
// GetSpaceIdsRequest.Validate if the designated constraints aren't met.
type GetSpaceIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpaceIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpaceIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpaceIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpaceIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpaceIdsRequestValidationError) ErrorName() string {
	return "GetSpaceIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpaceIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpaceIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpaceIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpaceIdsRequestValidationError{}

// Validate checks the field values on GetSpaceIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSpaceIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpaceIdsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpaceIdsResponseMultiError, or nil if none found.
func (m *GetSpaceIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpaceIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSpaceIdsResponseMultiError(errors)
	}

	return nil
}

// GetSpaceIdsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSpaceIdsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSpaceIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpaceIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpaceIdsResponseMultiError) AllErrors() []error { return m }

// GetSpaceIdsResponseValidationError is the validation error returned by
// GetSpaceIdsResponse.Validate if the designated constraints aren't met.
type GetSpaceIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpaceIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpaceIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpaceIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpaceIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpaceIdsResponseValidationError) ErrorName() string {
	return "GetSpaceIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpaceIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpaceIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpaceIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpaceIdsResponseValidationError{}

// Validate checks the field values on GetTerminalSpaceIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTerminalSpaceIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTerminalSpaceIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTerminalSpaceIdsRequestMultiError, or nil if none found.
func (m *GetTerminalSpaceIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTerminalSpaceIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTerminalSpaceIdsRequestMultiError(errors)
	}

	return nil
}

// GetTerminalSpaceIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetTerminalSpaceIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTerminalSpaceIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTerminalSpaceIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTerminalSpaceIdsRequestMultiError) AllErrors() []error { return m }

// GetTerminalSpaceIdsRequestValidationError is the validation error returned
// by GetTerminalSpaceIdsRequest.Validate if the designated constraints aren't met.
type GetTerminalSpaceIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTerminalSpaceIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTerminalSpaceIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTerminalSpaceIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTerminalSpaceIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTerminalSpaceIdsRequestValidationError) ErrorName() string {
	return "GetTerminalSpaceIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTerminalSpaceIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTerminalSpaceIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTerminalSpaceIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTerminalSpaceIdsRequestValidationError{}

// Validate checks the field values on GetTerminalSpaceIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTerminalSpaceIdsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTerminalSpaceIdsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTerminalSpaceIdsResponseMultiError, or nil if none found.
func (m *GetTerminalSpaceIdsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTerminalSpaceIdsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTerminalSpaceIdsResponseMultiError(errors)
	}

	return nil
}

// GetTerminalSpaceIdsResponseMultiError is an error wrapping multiple
// validation errors returned by GetTerminalSpaceIdsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTerminalSpaceIdsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTerminalSpaceIdsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTerminalSpaceIdsResponseMultiError) AllErrors() []error { return m }

// GetTerminalSpaceIdsResponseValidationError is the validation error returned
// by GetTerminalSpaceIdsResponse.Validate if the designated constraints
// aren't met.
type GetTerminalSpaceIdsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTerminalSpaceIdsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTerminalSpaceIdsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTerminalSpaceIdsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTerminalSpaceIdsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTerminalSpaceIdsResponseValidationError) ErrorName() string {
	return "GetTerminalSpaceIdsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTerminalSpaceIdsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTerminalSpaceIdsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTerminalSpaceIdsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTerminalSpaceIdsResponseValidationError{}

// Validate checks the field values on FilterRequest_FilterUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FilterRequest_FilterUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest_FilterUnit with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FilterRequest_FilterUnitMultiError, or nil if none found.
func (m *FilterRequest_FilterUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest_FilterUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotModifier

	// no validation rules for KladrId

	// no validation rules for FiasId

	// no validation rules for PupId

	// no validation rules for SpaceId

	if all {
		switch v := interface{}(m.GetHidden()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "Hidden",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "Hidden",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHidden()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterRequest_FilterUnitValidationError{
				field:  "Hidden",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInCity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "InCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "InCity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInCity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterRequest_FilterUnitValidationError{
				field:  "InCity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIsMainStore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "IsMainStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FilterRequest_FilterUnitValidationError{
					field:  "IsMainStore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIsMainStore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FilterRequest_FilterUnitValidationError{
				field:  "IsMainStore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LocationCode

	// no validation rules for PupIdNav

	if len(errors) > 0 {
		return FilterRequest_FilterUnitMultiError(errors)
	}

	return nil
}

// FilterRequest_FilterUnitMultiError is an error wrapping multiple validation
// errors returned by FilterRequest_FilterUnit.ValidateAll() if the designated
// constraints aren't met.
type FilterRequest_FilterUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequest_FilterUnitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequest_FilterUnitMultiError) AllErrors() []error { return m }

// FilterRequest_FilterUnitValidationError is the validation error returned by
// FilterRequest_FilterUnit.Validate if the designated constraints aren't met.
type FilterRequest_FilterUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequest_FilterUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequest_FilterUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequest_FilterUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequest_FilterUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequest_FilterUnitValidationError) ErrorName() string {
	return "FilterRequest_FilterUnitValidationError"
}

// Error satisfies the builtin error interface
func (e FilterRequest_FilterUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest_FilterUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequest_FilterUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequest_FilterUnitValidationError{}

// Validate checks the field values on FilterRequest_FilterUnit_InCityFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FilterRequest_FilterUnit_InCityFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FilterRequest_FilterUnit_InCityFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FilterRequest_FilterUnit_InCityFilterMultiError, or nil if none found.
func (m *FilterRequest_FilterUnit_InCityFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *FilterRequest_FilterUnit_InCityFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KladrId

	// no validation rules for FiasId

	// no validation rules for CityId

	if len(errors) > 0 {
		return FilterRequest_FilterUnit_InCityFilterMultiError(errors)
	}

	return nil
}

// FilterRequest_FilterUnit_InCityFilterMultiError is an error wrapping
// multiple validation errors returned by
// FilterRequest_FilterUnit_InCityFilter.ValidateAll() if the designated
// constraints aren't met.
type FilterRequest_FilterUnit_InCityFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterRequest_FilterUnit_InCityFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterRequest_FilterUnit_InCityFilterMultiError) AllErrors() []error { return m }

// FilterRequest_FilterUnit_InCityFilterValidationError is the validation error
// returned by FilterRequest_FilterUnit_InCityFilter.Validate if the
// designated constraints aren't met.
type FilterRequest_FilterUnit_InCityFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterRequest_FilterUnit_InCityFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterRequest_FilterUnit_InCityFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterRequest_FilterUnit_InCityFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterRequest_FilterUnit_InCityFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterRequest_FilterUnit_InCityFilterValidationError) ErrorName() string {
	return "FilterRequest_FilterUnit_InCityFilterValidationError"
}

// Error satisfies the builtin error interface
func (e FilterRequest_FilterUnit_InCityFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilterRequest_FilterUnit_InCityFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterRequest_FilterUnit_InCityFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterRequest_FilterUnit_InCityFilterValidationError{}
