// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: citilink/store/store/v1/store.proto

package storev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StoreMultiError, or nil if none found.
func (m *Store) ValidateAll() error {
	return m.validate(true)
}

func (m *Store) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SpaceId

	// no validation rules for PupId

	// no validation rules for IsNew

	// no validation rules for CityName

	// no validation rules for MainCityNameInDeclination

	// no validation rules for IsCity

	// no validation rules for KladrId

	// no validation rules for UtcDelta

	// no validation rules for Blocked

	// no validation rules for CoordX

	// no validation rules for CoordY

	// no validation rules for DeliveryInfo

	// no validation rules for IsCentralInRegion

	// no validation rules for IsRegion

	// no validation rules for Name

	// no validation rules for HtmlPhone

	// no validation rules for PupAddress

	// no validation rules for RouteDescr

	// no validation rules for ServiceInfo

	// no validation rules for ShortName

	// no validation rules for Sorting

	// no validation rules for WorkHours

	// no validation rules for ConfServiceEmail

	// no validation rules for ReceivedTime

	if all {
		switch v := interface{}(m.GetLinkedStockInRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "LinkedStockInRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "LinkedStockInRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinkedStockInRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "LinkedStockInRegion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CanProvideDigitalServices

	// no validation rules for IsSuspended

	// no validation rules for SuspensionStart

	// no validation rules for SuspensionEnd

	// no validation rules for SuspensionMessage

	// no validation rules for IsNeedPhoneCallToReserveDiscountedProduct

	// no validation rules for VeryShortName

	// no validation rules for NewReservationType

	// no validation rules for LegalAddressInHtml

	// no validation rules for Ogrn

	// no validation rules for ServicesListInHtml

	// no validation rules for DeliveryPrice

	// no validation rules for IsShowCustomMap

	// no validation rules for PhoneForB2B

	// no validation rules for EmailForB2B

	// no validation rules for LegalEntityAddress

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "Address",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "Address",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsHidden

	// no validation rules for TerminalSpaceId

	// no validation rules for StoreType

	if all {
		switch v := interface{}(m.GetDeliveryOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "DeliveryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "DeliveryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeliveryOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "DeliveryOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LocationCode

	// no validation rules for PupIdNav

	// no validation rules for CitilinkLegalEntityNameShort

	// no validation rules for CitilinkLegalEntityNameFull

	if all {
		switch v := interface{}(m.GetShopType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "ShopType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreValidationError{
					field:  "ShopType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShopType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreValidationError{
				field:  "ShopType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NeedToFill

	// no validation rules for ShippingAgent

	if len(errors) > 0 {
		return StoreMultiError(errors)
	}

	return nil
}

// StoreMultiError is an error wrapping multiple validation errors returned by
// Store.ValidateAll() if the designated constraints aren't met.
type StoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreMultiError) AllErrors() []error { return m }

// StoreValidationError is the validation error returned by Store.Validate if
// the designated constraints aren't met.
type StoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreValidationError) ErrorName() string { return "StoreValidationError" }

// Error satisfies the builtin error interface
func (e StoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreValidationError{}

// Validate checks the field values on Store_Schedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store_Schedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store_Schedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Store_ScheduleMultiError,
// or nil if none found.
func (m *Store_Schedule) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_Schedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkDays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Store_ScheduleValidationError{
						field:  fmt.Sprintf("WorkDays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Store_ScheduleValidationError{
						field:  fmt.Sprintf("WorkDays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Store_ScheduleValidationError{
					field:  fmt.Sprintf("WorkDays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Store_ScheduleMultiError(errors)
	}

	return nil
}

// Store_ScheduleMultiError is an error wrapping multiple validation errors
// returned by Store_Schedule.ValidateAll() if the designated constraints
// aren't met.
type Store_ScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_ScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_ScheduleMultiError) AllErrors() []error { return m }

// Store_ScheduleValidationError is the validation error returned by
// Store_Schedule.Validate if the designated constraints aren't met.
type Store_ScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_ScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_ScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_ScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_ScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_ScheduleValidationError) ErrorName() string { return "Store_ScheduleValidationError" }

// Error satisfies the builtin error interface
func (e Store_ScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_Schedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_ScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_ScheduleValidationError{}

// Validate checks the field values on Store_Address with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store_Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store_Address with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Store_AddressMultiError, or
// nil if none found.
func (m *Store_Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ZipCode

	// no validation rules for Region

	// no validation rules for Area

	// no validation rules for City

	// no validation rules for Street

	// no validation rules for House

	// no validation rules for Building

	// no validation rules for Houseblock

	// no validation rules for Posession

	// no validation rules for Dimension

	// no validation rules for Note

	// no validation rules for GeoCode

	if len(errors) > 0 {
		return Store_AddressMultiError(errors)
	}

	return nil
}

// Store_AddressMultiError is an error wrapping multiple validation errors
// returned by Store_Address.ValidateAll() if the designated constraints
// aren't met.
type Store_AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_AddressMultiError) AllErrors() []error { return m }

// Store_AddressValidationError is the validation error returned by
// Store_Address.Validate if the designated constraints aren't met.
type Store_AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_AddressValidationError) ErrorName() string { return "Store_AddressValidationError" }

// Error satisfies the builtin error interface
func (e Store_AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_Address.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_AddressValidationError{}

// Validate checks the field values on Store_DeliveryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Store_DeliveryOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store_DeliveryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Store_DeliveryOptionsMultiError, or nil if none found.
func (m *Store_DeliveryOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_DeliveryOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsMoveToFull

	// no validation rules for IsMoveToMini

	// no validation rules for CanDelivery

	// no validation rules for IsSelfDeliveryOnly

	if len(errors) > 0 {
		return Store_DeliveryOptionsMultiError(errors)
	}

	return nil
}

// Store_DeliveryOptionsMultiError is an error wrapping multiple validation
// errors returned by Store_DeliveryOptions.ValidateAll() if the designated
// constraints aren't met.
type Store_DeliveryOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_DeliveryOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_DeliveryOptionsMultiError) AllErrors() []error { return m }

// Store_DeliveryOptionsValidationError is the validation error returned by
// Store_DeliveryOptions.Validate if the designated constraints aren't met.
type Store_DeliveryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_DeliveryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_DeliveryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_DeliveryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_DeliveryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_DeliveryOptionsValidationError) ErrorName() string {
	return "Store_DeliveryOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e Store_DeliveryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_DeliveryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_DeliveryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_DeliveryOptionsValidationError{}

// Validate checks the field values on Store_ShopType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store_ShopType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store_ShopType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Store_ShopTypeMultiError,
// or nil if none found.
func (m *Store_ShopType) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_ShopType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShopFormat

	// no validation rules for ShopSubFormat

	if len(errors) > 0 {
		return Store_ShopTypeMultiError(errors)
	}

	return nil
}

// Store_ShopTypeMultiError is an error wrapping multiple validation errors
// returned by Store_ShopType.ValidateAll() if the designated constraints
// aren't met.
type Store_ShopTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_ShopTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_ShopTypeMultiError) AllErrors() []error { return m }

// Store_ShopTypeValidationError is the validation error returned by
// Store_ShopType.Validate if the designated constraints aren't met.
type Store_ShopTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_ShopTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_ShopTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_ShopTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_ShopTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_ShopTypeValidationError) ErrorName() string { return "Store_ShopTypeValidationError" }

// Error satisfies the builtin error interface
func (e Store_ShopTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_ShopType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_ShopTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_ShopTypeValidationError{}

// Validate checks the field values on Store_Schedule_WorkDaySchedule with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Store_Schedule_WorkDaySchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Store_Schedule_WorkDaySchedule with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Store_Schedule_WorkDayScheduleMultiError, or nil if none found.
func (m *Store_Schedule_WorkDaySchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_Schedule_WorkDaySchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DayOfWeek

	if all {
		switch v := interface{}(m.GetOpen()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Store_Schedule_WorkDayScheduleValidationError{
					field:  "Open",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Store_Schedule_WorkDayScheduleValidationError{
					field:  "Open",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOpen()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Store_Schedule_WorkDayScheduleValidationError{
				field:  "Open",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClose()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Store_Schedule_WorkDayScheduleValidationError{
					field:  "Close",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Store_Schedule_WorkDayScheduleValidationError{
					field:  "Close",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClose()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Store_Schedule_WorkDayScheduleValidationError{
				field:  "Close",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Store_Schedule_WorkDayScheduleMultiError(errors)
	}

	return nil
}

// Store_Schedule_WorkDayScheduleMultiError is an error wrapping multiple
// validation errors returned by Store_Schedule_WorkDaySchedule.ValidateAll()
// if the designated constraints aren't met.
type Store_Schedule_WorkDayScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_Schedule_WorkDayScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_Schedule_WorkDayScheduleMultiError) AllErrors() []error { return m }

// Store_Schedule_WorkDayScheduleValidationError is the validation error
// returned by Store_Schedule_WorkDaySchedule.Validate if the designated
// constraints aren't met.
type Store_Schedule_WorkDayScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_Schedule_WorkDayScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_Schedule_WorkDayScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_Schedule_WorkDayScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_Schedule_WorkDayScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_Schedule_WorkDayScheduleValidationError) ErrorName() string {
	return "Store_Schedule_WorkDayScheduleValidationError"
}

// Error satisfies the builtin error interface
func (e Store_Schedule_WorkDayScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_Schedule_WorkDaySchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_Schedule_WorkDayScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_Schedule_WorkDayScheduleValidationError{}

// Validate checks the field values on
// Store_Schedule_WorkDaySchedule_WorkTimePart with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Store_Schedule_WorkDaySchedule_WorkTimePart) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Store_Schedule_WorkDaySchedule_WorkTimePart with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// Store_Schedule_WorkDaySchedule_WorkTimePartMultiError, or nil if none found.
func (m *Store_Schedule_WorkDaySchedule_WorkTimePart) ValidateAll() error {
	return m.validate(true)
}

func (m *Store_Schedule_WorkDaySchedule_WorkTimePart) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hour

	// no validation rules for Minute

	if len(errors) > 0 {
		return Store_Schedule_WorkDaySchedule_WorkTimePartMultiError(errors)
	}

	return nil
}

// Store_Schedule_WorkDaySchedule_WorkTimePartMultiError is an error wrapping
// multiple validation errors returned by
// Store_Schedule_WorkDaySchedule_WorkTimePart.ValidateAll() if the designated
// constraints aren't met.
type Store_Schedule_WorkDaySchedule_WorkTimePartMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Store_Schedule_WorkDaySchedule_WorkTimePartMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Store_Schedule_WorkDaySchedule_WorkTimePartMultiError) AllErrors() []error { return m }

// Store_Schedule_WorkDaySchedule_WorkTimePartValidationError is the validation
// error returned by Store_Schedule_WorkDaySchedule_WorkTimePart.Validate if
// the designated constraints aren't met.
type Store_Schedule_WorkDaySchedule_WorkTimePartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) ErrorName() string {
	return "Store_Schedule_WorkDaySchedule_WorkTimePartValidationError"
}

// Error satisfies the builtin error interface
func (e Store_Schedule_WorkDaySchedule_WorkTimePartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStore_Schedule_WorkDaySchedule_WorkTimePart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Store_Schedule_WorkDaySchedule_WorkTimePartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Store_Schedule_WorkDaySchedule_WorkTimePartValidationError{}
