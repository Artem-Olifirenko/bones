// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: citilink/store/store/v1/store.proto

package storev1

import (
	v1 "go.citilink.cloud/grpc-skeleton/internal/specs/grpcclient/gen/citilink/store/stock/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// День недели.
type DayOfWeek int32

const (
	DayOfWeek_DAY_OF_WEEK_INVALID   DayOfWeek = 0
	DayOfWeek_DAY_OF_WEEK_MONDAY    DayOfWeek = 1
	DayOfWeek_DAY_OF_WEEK_TUESDAY   DayOfWeek = 2
	DayOfWeek_DAY_OF_WEEK_WEDNESDAY DayOfWeek = 3
	DayOfWeek_DAY_OF_WEEK_THURSDAY  DayOfWeek = 4
	DayOfWeek_DAY_OF_WEEK_FRIDAY    DayOfWeek = 5
	DayOfWeek_DAY_OF_WEEK_SATURDAY  DayOfWeek = 6
	DayOfWeek_DAY_OF_WEEK_SUNDAY    DayOfWeek = 7
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "DAY_OF_WEEK_INVALID",
		1: "DAY_OF_WEEK_MONDAY",
		2: "DAY_OF_WEEK_TUESDAY",
		3: "DAY_OF_WEEK_WEDNESDAY",
		4: "DAY_OF_WEEK_THURSDAY",
		5: "DAY_OF_WEEK_FRIDAY",
		6: "DAY_OF_WEEK_SATURDAY",
		7: "DAY_OF_WEEK_SUNDAY",
	}
	DayOfWeek_value = map[string]int32{
		"DAY_OF_WEEK_INVALID":   0,
		"DAY_OF_WEEK_MONDAY":    1,
		"DAY_OF_WEEK_TUESDAY":   2,
		"DAY_OF_WEEK_WEDNESDAY": 3,
		"DAY_OF_WEEK_THURSDAY":  4,
		"DAY_OF_WEEK_FRIDAY":    5,
		"DAY_OF_WEEK_SATURDAY":  6,
		"DAY_OF_WEEK_SUNDAY":    7,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_citilink_store_store_v1_store_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_citilink_store_store_v1_store_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0}
}

// Тип магазина. deprecated - использовать ShopType
type Store_Type int32

const (
	Store_TYPE_INVALID Store_Type = 0
	// Полноформатный магазина
	Store_TYPE_FULL Store_Type = 1
	// Магазин типа СМАРТ/МИДИ и так далее
	Store_TYPE_MAIN_MINI Store_Type = 2
	// Мини (точка выдачи)
	Store_TYPE_MINI Store_Type = 3
)

// Enum value maps for Store_Type.
var (
	Store_Type_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_FULL",
		2: "TYPE_MAIN_MINI",
		3: "TYPE_MINI",
	}
	Store_Type_value = map[string]int32{
		"TYPE_INVALID":   0,
		"TYPE_FULL":      1,
		"TYPE_MAIN_MINI": 2,
		"TYPE_MINI":      3,
	}
)

func (x Store_Type) Enum() *Store_Type {
	p := new(Store_Type)
	*p = x
	return p
}

func (x Store_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Store_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_citilink_store_store_v1_store_proto_enumTypes[1].Descriptor()
}

func (Store_Type) Type() protoreflect.EnumType {
	return &file_citilink_store_store_v1_store_proto_enumTypes[1]
}

func (x Store_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Store_Type.Descriptor instead.
func (Store_Type) EnumDescriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 0}
}

// Идентификатор подрядчика по доставке.
type Store_ShippingAgent int32

const (
	Store_SHIPPING_AGENT_INVALID Store_ShippingAgent = 0
	// наши магазины
	Store_SHIPPING_AGENT_CITILINK Store_ShippingAgent = 1
	// dpd
	Store_SHIPPING_AGENT_DPD Store_ShippingAgent = 2
)

// Enum value maps for Store_ShippingAgent.
var (
	Store_ShippingAgent_name = map[int32]string{
		0: "SHIPPING_AGENT_INVALID",
		1: "SHIPPING_AGENT_CITILINK",
		2: "SHIPPING_AGENT_DPD",
	}
	Store_ShippingAgent_value = map[string]int32{
		"SHIPPING_AGENT_INVALID":  0,
		"SHIPPING_AGENT_CITILINK": 1,
		"SHIPPING_AGENT_DPD":      2,
	}
)

func (x Store_ShippingAgent) Enum() *Store_ShippingAgent {
	p := new(Store_ShippingAgent)
	*p = x
	return p
}

func (x Store_ShippingAgent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Store_ShippingAgent) Descriptor() protoreflect.EnumDescriptor {
	return file_citilink_store_store_v1_store_proto_enumTypes[2].Descriptor()
}

func (Store_ShippingAgent) Type() protoreflect.EnumType {
	return &file_citilink_store_store_v1_store_proto_enumTypes[2]
}

func (x Store_ShippingAgent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Store_ShippingAgent.Descriptor instead.
func (Store_ShippingAgent) EnumDescriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 1}
}

// Формат магазина.
type Store_ShopType_Format int32

const (
	Store_ShopType_FORMAT_INVALID Store_ShopType_Format = 0
	// ПФМ - полноформатный магазин
	Store_ShopType_FORMAT_FULL_FORMAT_SHOP Store_ShopType_Format = 1
	// СТВ - собственная точка вывоза
	Store_ShopType_FORMAT_OWN_POINT_OF_EXPORT Store_ShopType_Format = 2
	// Точка вывоза на аутсорсе
	Store_ShopType_FORMAT_OUTSOURCE Store_ShopType_Format = 3
)

// Enum value maps for Store_ShopType_Format.
var (
	Store_ShopType_Format_name = map[int32]string{
		0: "FORMAT_INVALID",
		1: "FORMAT_FULL_FORMAT_SHOP",
		2: "FORMAT_OWN_POINT_OF_EXPORT",
		3: "FORMAT_OUTSOURCE",
	}
	Store_ShopType_Format_value = map[string]int32{
		"FORMAT_INVALID":             0,
		"FORMAT_FULL_FORMAT_SHOP":    1,
		"FORMAT_OWN_POINT_OF_EXPORT": 2,
		"FORMAT_OUTSOURCE":           3,
	}
)

func (x Store_ShopType_Format) Enum() *Store_ShopType_Format {
	p := new(Store_ShopType_Format)
	*p = x
	return p
}

func (x Store_ShopType_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Store_ShopType_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_citilink_store_store_v1_store_proto_enumTypes[3].Descriptor()
}

func (Store_ShopType_Format) Type() protoreflect.EnumType {
	return &file_citilink_store_store_v1_store_proto_enumTypes[3]
}

func (x Store_ShopType_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Store_ShopType_Format.Descriptor instead.
func (Store_ShopType_Format) EnumDescriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 3, 0}
}

// Подвид магазина.
type Store_ShopType_SubFormat int32

const (
	Store_ShopType_SUB_FORMAT_INVALID Store_ShopType_SubFormat = 0
	// Большой магазин (ПФМ)
	Store_ShopType_SUB_FORMAT_MAXI Store_ShopType_SubFormat = 1
	// Средний магазин (ПФМ)
	Store_ShopType_SUB_FORMAT_MIDI Store_ShopType_SubFormat = 2
	// Смарт точка (ПФМ)
	Store_ShopType_SUB_FORMAT_SMART Store_ShopType_SubFormat = 3
	// Шоурум (ПФМ)
	Store_ShopType_SUB_FORMAT_SHOW_ROOM Store_ShopType_SubFormat = 4
	// Мини точка продаж (СТВ)
	Store_ShopType_SUB_FORMAT_MINI Store_ShopType_SubFormat = 5
	// Точка продаж на аутсорсе
	Store_ShopType_SUB_FORMAT_OUTSOURCE Store_ShopType_SubFormat = 6
)

// Enum value maps for Store_ShopType_SubFormat.
var (
	Store_ShopType_SubFormat_name = map[int32]string{
		0: "SUB_FORMAT_INVALID",
		1: "SUB_FORMAT_MAXI",
		2: "SUB_FORMAT_MIDI",
		3: "SUB_FORMAT_SMART",
		4: "SUB_FORMAT_SHOW_ROOM",
		5: "SUB_FORMAT_MINI",
		6: "SUB_FORMAT_OUTSOURCE",
	}
	Store_ShopType_SubFormat_value = map[string]int32{
		"SUB_FORMAT_INVALID":   0,
		"SUB_FORMAT_MAXI":      1,
		"SUB_FORMAT_MIDI":      2,
		"SUB_FORMAT_SMART":     3,
		"SUB_FORMAT_SHOW_ROOM": 4,
		"SUB_FORMAT_MINI":      5,
		"SUB_FORMAT_OUTSOURCE": 6,
	}
)

func (x Store_ShopType_SubFormat) Enum() *Store_ShopType_SubFormat {
	p := new(Store_ShopType_SubFormat)
	*p = x
	return p
}

func (x Store_ShopType_SubFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Store_ShopType_SubFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_citilink_store_store_v1_store_proto_enumTypes[4].Descriptor()
}

func (Store_ShopType_SubFormat) Type() protoreflect.EnumType {
	return &file_citilink_store_store_v1_store_proto_enumTypes[4]
}

func (x Store_ShopType_SubFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Store_ShopType_SubFormat.Descriptor instead.
func (Store_ShopType_SubFormat) EnumDescriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 3, 1}
}

// Магазин.
type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpaceId                                   string                 `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	PupId                                     string                 `protobuf:"bytes,2,opt,name=pup_id,json=pupId,proto3" json:"pup_id,omitempty"`
	IsNew                                     bool                   `protobuf:"varint,3,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	CityName                                  string                 `protobuf:"bytes,4,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	MainCityNameInDeclination                 string                 `protobuf:"bytes,5,opt,name=main_city_name_in_declination,json=mainCityNameInDeclination,proto3" json:"main_city_name_in_declination,omitempty"`
	IsCity                                    bool                   `protobuf:"varint,6,opt,name=is_city,json=isCity,proto3" json:"is_city,omitempty"`
	KladrId                                   string                 `protobuf:"bytes,7,opt,name=kladr_id,json=kladrId,proto3" json:"kladr_id,omitempty"`
	UtcDelta                                  int32                  `protobuf:"varint,8,opt,name=utc_delta,json=utcDelta,proto3" json:"utc_delta,omitempty"`
	Blocked                                   bool                   `protobuf:"varint,9,opt,name=blocked,proto3" json:"blocked,omitempty"`
	CoordX                                    float32                `protobuf:"fixed32,10,opt,name=coord_x,json=coordX,proto3" json:"coord_x,omitempty"`
	CoordY                                    float32                `protobuf:"fixed32,11,opt,name=coord_y,json=coordY,proto3" json:"coord_y,omitempty"`
	DeliveryInfo                              string                 `protobuf:"bytes,12,opt,name=delivery_info,json=deliveryInfo,proto3" json:"delivery_info,omitempty"`
	IsCentralInRegion                         bool                   `protobuf:"varint,13,opt,name=is_central_in_region,json=isCentralInRegion,proto3" json:"is_central_in_region,omitempty"`
	IsRegion                                  bool                   `protobuf:"varint,14,opt,name=is_region,json=isRegion,proto3" json:"is_region,omitempty"`
	Name                                      string                 `protobuf:"bytes,15,opt,name=name,proto3" json:"name,omitempty"`
	Phones                                    []string               `protobuf:"bytes,16,rep,name=phones,proto3" json:"phones,omitempty"`
	HtmlPhone                                 string                 `protobuf:"bytes,17,opt,name=html_phone,json=htmlPhone,proto3" json:"html_phone,omitempty"`
	PupAddress                                string                 `protobuf:"bytes,18,opt,name=pup_address,json=pupAddress,proto3" json:"pup_address,omitempty"`
	RouteDescr                                string                 `protobuf:"bytes,19,opt,name=route_descr,json=routeDescr,proto3" json:"route_descr,omitempty"`
	ServiceInfo                               string                 `protobuf:"bytes,20,opt,name=service_info,json=serviceInfo,proto3" json:"service_info,omitempty"`
	ServiceList                               []int32                `protobuf:"varint,21,rep,packed,name=service_list,json=serviceList,proto3" json:"service_list,omitempty"`
	ShortName                                 string                 `protobuf:"bytes,22,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Sorting                                   int32                  `protobuf:"varint,23,opt,name=sorting,proto3" json:"sorting,omitempty"`
	WorkHours                                 string                 `protobuf:"bytes,24,opt,name=work_hours,json=workHours,proto3" json:"work_hours,omitempty"`
	ConfServiceEmail                          string                 `protobuf:"bytes,25,opt,name=conf_service_email,json=confServiceEmail,proto3" json:"conf_service_email,omitempty"`
	ReceivedTime                              string                 `protobuf:"bytes,26,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	LinkedStockInRegion                       *v1.StockInfo_Stock    `protobuf:"bytes,27,opt,name=linked_stock_in_region,json=linkedStockInRegion,proto3" json:"linked_stock_in_region,omitempty"`
	CanProvideDigitalServices                 bool                   `protobuf:"varint,28,opt,name=can_provide_digital_services,json=canProvideDigitalServices,proto3" json:"can_provide_digital_services,omitempty"`
	IsSuspended                               bool                   `protobuf:"varint,29,opt,name=is_suspended,json=isSuspended,proto3" json:"is_suspended,omitempty"`
	SuspensionStart                           int32                  `protobuf:"varint,30,opt,name=suspension_start,json=suspensionStart,proto3" json:"suspension_start,omitempty"`
	SuspensionEnd                             int32                  `protobuf:"varint,31,opt,name=suspension_end,json=suspensionEnd,proto3" json:"suspension_end,omitempty"`
	SuspensionMessage                         string                 `protobuf:"bytes,32,opt,name=suspension_message,json=suspensionMessage,proto3" json:"suspension_message,omitempty"`
	IsNeedPhoneCallToReserveDiscountedProduct bool                   `protobuf:"varint,33,opt,name=is_need_phone_call_to_reserve_discounted_product,json=isNeedPhoneCallToReserveDiscountedProduct,proto3" json:"is_need_phone_call_to_reserve_discounted_product,omitempty"`
	VeryShortName                             string                 `protobuf:"bytes,34,opt,name=very_short_name,json=veryShortName,proto3" json:"very_short_name,omitempty"`
	NewReservationType                        bool                   `protobuf:"varint,35,opt,name=new_reservation_type,json=newReservationType,proto3" json:"new_reservation_type,omitempty"`
	LegalAddressInHtml                        string                 `protobuf:"bytes,36,opt,name=legal_address_in_html,json=legalAddressInHtml,proto3" json:"legal_address_in_html,omitempty"`
	Ogrn                                      string                 `protobuf:"bytes,37,opt,name=ogrn,proto3" json:"ogrn,omitempty"`
	ServicesListInHtml                        string                 `protobuf:"bytes,38,opt,name=services_list_in_html,json=servicesListInHtml,proto3" json:"services_list_in_html,omitempty"`
	DeliveryPrice                             int32                  `protobuf:"varint,39,opt,name=delivery_price,json=deliveryPrice,proto3" json:"delivery_price,omitempty"`
	IsShowCustomMap                           bool                   `protobuf:"varint,40,opt,name=is_show_custom_map,json=isShowCustomMap,proto3" json:"is_show_custom_map,omitempty"`
	PhoneForB2B                               string                 `protobuf:"bytes,41,opt,name=phone_for_b2b,json=phoneForB2b,proto3" json:"phone_for_b2b,omitempty"`
	EmailForB2B                               string                 `protobuf:"bytes,42,opt,name=email_for_b2b,json=emailForB2b,proto3" json:"email_for_b2b,omitempty"`
	LegalEntityAddress                        string                 `protobuf:"bytes,43,opt,name=legal_entity_address,json=legalEntityAddress,proto3" json:"legal_entity_address,omitempty"`
	PupIdsOfLinkedStores                      []string               `protobuf:"bytes,44,rep,name=pup_ids_of_linked_stores,json=pupIdsOfLinkedStores,proto3" json:"pup_ids_of_linked_stores,omitempty"`
	Schedule                                  *Store_Schedule        `protobuf:"bytes,45,opt,name=schedule,proto3" json:"schedule,omitempty"`
	Address                                   *Store_Address         `protobuf:"bytes,46,opt,name=address,proto3" json:"address,omitempty"`
	IsHidden                                  bool                   `protobuf:"varint,47,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	TerminalSpaceId                           string                 `protobuf:"bytes,48,opt,name=terminal_space_id,json=terminalSpaceId,proto3" json:"terminal_space_id,omitempty"`
	StoreType                                 Store_Type             `protobuf:"varint,49,opt,name=store_type,json=storeType,proto3,enum=citilink.store.store.v1.Store_Type" json:"store_type,omitempty"`
	DeliveryOptions                           *Store_DeliveryOptions `protobuf:"bytes,50,opt,name=delivery_options,json=deliveryOptions,proto3" json:"delivery_options,omitempty"`
	LocationCode                              string                 `protobuf:"bytes,51,opt,name=location_code,json=locationCode,proto3" json:"location_code,omitempty"`
	PupIdNav                                  int32                  `protobuf:"varint,52,opt,name=pup_id_nav,json=pupIdNav,proto3" json:"pup_id_nav,omitempty"`
	// Название юридического лица, из под которого работает Ситилинк с акронимом
	CitilinkLegalEntityNameShort string `protobuf:"bytes,53,opt,name=citilink_legal_entity_name_short,json=citilinkLegalEntityNameShort,proto3" json:"citilink_legal_entity_name_short,omitempty"`
	// Название юридического лица, из под которого работает Ситилинк без сокращений
	CitilinkLegalEntityNameFull string          `protobuf:"bytes,54,opt,name=citilink_legal_entity_name_full,json=citilinkLegalEntityNameFull,proto3" json:"citilink_legal_entity_name_full,omitempty"`
	ShopType                    *Store_ShopType `protobuf:"bytes,55,opt,name=shop_type,json=shopType,proto3" json:"shop_type,omitempty"`
	// Заполнены ли все обязательные поля у магазина для отображения его сайте либо формирования фида в гугл/яндекс
	// true - есть не заполненные поля, false - все важные поля заполнены
	NeedToFill bool `protobuf:"varint,56,opt,name=need_to_fill,json=needToFill,proto3" json:"need_to_fill,omitempty"`
	// Идентификатор подрядчика по доставке (1-наши магазины, 2-dpd)
	ShippingAgent Store_ShippingAgent `protobuf:"varint,57,opt,name=shipping_agent,json=shippingAgent,proto3,enum=citilink.store.store.v1.Store_ShippingAgent" json:"shipping_agent,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0}
}

func (x *Store) GetSpaceId() string {
	if x != nil {
		return x.SpaceId
	}
	return ""
}

func (x *Store) GetPupId() string {
	if x != nil {
		return x.PupId
	}
	return ""
}

func (x *Store) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *Store) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Store) GetMainCityNameInDeclination() string {
	if x != nil {
		return x.MainCityNameInDeclination
	}
	return ""
}

func (x *Store) GetIsCity() bool {
	if x != nil {
		return x.IsCity
	}
	return false
}

func (x *Store) GetKladrId() string {
	if x != nil {
		return x.KladrId
	}
	return ""
}

func (x *Store) GetUtcDelta() int32 {
	if x != nil {
		return x.UtcDelta
	}
	return 0
}

func (x *Store) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *Store) GetCoordX() float32 {
	if x != nil {
		return x.CoordX
	}
	return 0
}

func (x *Store) GetCoordY() float32 {
	if x != nil {
		return x.CoordY
	}
	return 0
}

func (x *Store) GetDeliveryInfo() string {
	if x != nil {
		return x.DeliveryInfo
	}
	return ""
}

func (x *Store) GetIsCentralInRegion() bool {
	if x != nil {
		return x.IsCentralInRegion
	}
	return false
}

func (x *Store) GetIsRegion() bool {
	if x != nil {
		return x.IsRegion
	}
	return false
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Store) GetPhones() []string {
	if x != nil {
		return x.Phones
	}
	return nil
}

func (x *Store) GetHtmlPhone() string {
	if x != nil {
		return x.HtmlPhone
	}
	return ""
}

func (x *Store) GetPupAddress() string {
	if x != nil {
		return x.PupAddress
	}
	return ""
}

func (x *Store) GetRouteDescr() string {
	if x != nil {
		return x.RouteDescr
	}
	return ""
}

func (x *Store) GetServiceInfo() string {
	if x != nil {
		return x.ServiceInfo
	}
	return ""
}

func (x *Store) GetServiceList() []int32 {
	if x != nil {
		return x.ServiceList
	}
	return nil
}

func (x *Store) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Store) GetSorting() int32 {
	if x != nil {
		return x.Sorting
	}
	return 0
}

func (x *Store) GetWorkHours() string {
	if x != nil {
		return x.WorkHours
	}
	return ""
}

func (x *Store) GetConfServiceEmail() string {
	if x != nil {
		return x.ConfServiceEmail
	}
	return ""
}

func (x *Store) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *Store) GetLinkedStockInRegion() *v1.StockInfo_Stock {
	if x != nil {
		return x.LinkedStockInRegion
	}
	return nil
}

func (x *Store) GetCanProvideDigitalServices() bool {
	if x != nil {
		return x.CanProvideDigitalServices
	}
	return false
}

func (x *Store) GetIsSuspended() bool {
	if x != nil {
		return x.IsSuspended
	}
	return false
}

func (x *Store) GetSuspensionStart() int32 {
	if x != nil {
		return x.SuspensionStart
	}
	return 0
}

func (x *Store) GetSuspensionEnd() int32 {
	if x != nil {
		return x.SuspensionEnd
	}
	return 0
}

func (x *Store) GetSuspensionMessage() string {
	if x != nil {
		return x.SuspensionMessage
	}
	return ""
}

func (x *Store) GetIsNeedPhoneCallToReserveDiscountedProduct() bool {
	if x != nil {
		return x.IsNeedPhoneCallToReserveDiscountedProduct
	}
	return false
}

func (x *Store) GetVeryShortName() string {
	if x != nil {
		return x.VeryShortName
	}
	return ""
}

func (x *Store) GetNewReservationType() bool {
	if x != nil {
		return x.NewReservationType
	}
	return false
}

func (x *Store) GetLegalAddressInHtml() string {
	if x != nil {
		return x.LegalAddressInHtml
	}
	return ""
}

func (x *Store) GetOgrn() string {
	if x != nil {
		return x.Ogrn
	}
	return ""
}

func (x *Store) GetServicesListInHtml() string {
	if x != nil {
		return x.ServicesListInHtml
	}
	return ""
}

func (x *Store) GetDeliveryPrice() int32 {
	if x != nil {
		return x.DeliveryPrice
	}
	return 0
}

func (x *Store) GetIsShowCustomMap() bool {
	if x != nil {
		return x.IsShowCustomMap
	}
	return false
}

func (x *Store) GetPhoneForB2B() string {
	if x != nil {
		return x.PhoneForB2B
	}
	return ""
}

func (x *Store) GetEmailForB2B() string {
	if x != nil {
		return x.EmailForB2B
	}
	return ""
}

func (x *Store) GetLegalEntityAddress() string {
	if x != nil {
		return x.LegalEntityAddress
	}
	return ""
}

func (x *Store) GetPupIdsOfLinkedStores() []string {
	if x != nil {
		return x.PupIdsOfLinkedStores
	}
	return nil
}

func (x *Store) GetSchedule() *Store_Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Store) GetAddress() *Store_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Store) GetIsHidden() bool {
	if x != nil {
		return x.IsHidden
	}
	return false
}

func (x *Store) GetTerminalSpaceId() string {
	if x != nil {
		return x.TerminalSpaceId
	}
	return ""
}

func (x *Store) GetStoreType() Store_Type {
	if x != nil {
		return x.StoreType
	}
	return Store_TYPE_INVALID
}

func (x *Store) GetDeliveryOptions() *Store_DeliveryOptions {
	if x != nil {
		return x.DeliveryOptions
	}
	return nil
}

func (x *Store) GetLocationCode() string {
	if x != nil {
		return x.LocationCode
	}
	return ""
}

func (x *Store) GetPupIdNav() int32 {
	if x != nil {
		return x.PupIdNav
	}
	return 0
}

func (x *Store) GetCitilinkLegalEntityNameShort() string {
	if x != nil {
		return x.CitilinkLegalEntityNameShort
	}
	return ""
}

func (x *Store) GetCitilinkLegalEntityNameFull() string {
	if x != nil {
		return x.CitilinkLegalEntityNameFull
	}
	return ""
}

func (x *Store) GetShopType() *Store_ShopType {
	if x != nil {
		return x.ShopType
	}
	return nil
}

func (x *Store) GetNeedToFill() bool {
	if x != nil {
		return x.NeedToFill
	}
	return false
}

func (x *Store) GetShippingAgent() Store_ShippingAgent {
	if x != nil {
		return x.ShippingAgent
	}
	return Store_SHIPPING_AGENT_INVALID
}

// График работы.
type Store_Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkDays    []*Store_Schedule_WorkDaySchedule `protobuf:"bytes,1,rep,name=work_days,json=workDays,proto3" json:"work_days,omitempty"`
	NonWorkDays []int32                           `protobuf:"varint,2,rep,packed,name=non_work_days,json=nonWorkDays,proto3" json:"non_work_days,omitempty"`
}

func (x *Store_Schedule) Reset() {
	*x = Store_Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Schedule) ProtoMessage() {}

func (x *Store_Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Schedule.ProtoReflect.Descriptor instead.
func (*Store_Schedule) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Store_Schedule) GetWorkDays() []*Store_Schedule_WorkDaySchedule {
	if x != nil {
		return x.WorkDays
	}
	return nil
}

func (x *Store_Schedule) GetNonWorkDays() []int32 {
	if x != nil {
		return x.NonWorkDays
	}
	return nil
}

// Адрес.
type Store_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZipCode    string `protobuf:"bytes,1,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Area       string `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`
	City       string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	Street     string `protobuf:"bytes,5,opt,name=street,proto3" json:"street,omitempty"`
	House      string `protobuf:"bytes,6,opt,name=house,proto3" json:"house,omitempty"`
	Building   string `protobuf:"bytes,7,opt,name=building,proto3" json:"building,omitempty"`
	Houseblock string `protobuf:"bytes,8,opt,name=houseblock,proto3" json:"houseblock,omitempty"`
	Posession  string `protobuf:"bytes,9,opt,name=posession,proto3" json:"posession,omitempty"`
	Dimension  int32  `protobuf:"varint,10,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Note       string `protobuf:"bytes,11,opt,name=note,proto3" json:"note,omitempty"`
	// geo code области/региона в формате ISO 3166-2
	GeoCode string `protobuf:"bytes,12,opt,name=geo_code,json=geoCode,proto3" json:"geo_code,omitempty"`
}

func (x *Store_Address) Reset() {
	*x = Store_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Address) ProtoMessage() {}

func (x *Store_Address) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Address.ProtoReflect.Descriptor instead.
func (*Store_Address) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Store_Address) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Store_Address) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Store_Address) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *Store_Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Store_Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Store_Address) GetHouse() string {
	if x != nil {
		return x.House
	}
	return ""
}

func (x *Store_Address) GetBuilding() string {
	if x != nil {
		return x.Building
	}
	return ""
}

func (x *Store_Address) GetHouseblock() string {
	if x != nil {
		return x.Houseblock
	}
	return ""
}

func (x *Store_Address) GetPosession() string {
	if x != nil {
		return x.Posession
	}
	return ""
}

func (x *Store_Address) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *Store_Address) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Store_Address) GetGeoCode() string {
	if x != nil {
		return x.GeoCode
	}
	return ""
}

// Опции доставки.
type Store_DeliveryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsMoveToFull       bool `protobuf:"varint,1,opt,name=is_move_to_full,json=isMoveToFull,proto3" json:"is_move_to_full,omitempty"`
	IsMoveToMini       bool `protobuf:"varint,2,opt,name=is_move_to_mini,json=isMoveToMini,proto3" json:"is_move_to_mini,omitempty"`
	CanDelivery        bool `protobuf:"varint,3,opt,name=can_delivery,json=canDelivery,proto3" json:"can_delivery,omitempty"`
	IsSelfDeliveryOnly bool `protobuf:"varint,4,opt,name=is_self_delivery_only,json=isSelfDeliveryOnly,proto3" json:"is_self_delivery_only,omitempty"`
}

func (x *Store_DeliveryOptions) Reset() {
	*x = Store_DeliveryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_DeliveryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_DeliveryOptions) ProtoMessage() {}

func (x *Store_DeliveryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_DeliveryOptions.ProtoReflect.Descriptor instead.
func (*Store_DeliveryOptions) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Store_DeliveryOptions) GetIsMoveToFull() bool {
	if x != nil {
		return x.IsMoveToFull
	}
	return false
}

func (x *Store_DeliveryOptions) GetIsMoveToMini() bool {
	if x != nil {
		return x.IsMoveToMini
	}
	return false
}

func (x *Store_DeliveryOptions) GetCanDelivery() bool {
	if x != nil {
		return x.CanDelivery
	}
	return false
}

func (x *Store_DeliveryOptions) GetIsSelfDeliveryOnly() bool {
	if x != nil {
		return x.IsSelfDeliveryOnly
	}
	return false
}

// Тип магазина.
type Store_ShopType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopFormat    Store_ShopType_Format    `protobuf:"varint,1,opt,name=shop_format,json=shopFormat,proto3,enum=citilink.store.store.v1.Store_ShopType_Format" json:"shop_format,omitempty"`
	ShopSubFormat Store_ShopType_SubFormat `protobuf:"varint,2,opt,name=shop_sub_format,json=shopSubFormat,proto3,enum=citilink.store.store.v1.Store_ShopType_SubFormat" json:"shop_sub_format,omitempty"`
}

func (x *Store_ShopType) Reset() {
	*x = Store_ShopType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_ShopType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_ShopType) ProtoMessage() {}

func (x *Store_ShopType) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_ShopType.ProtoReflect.Descriptor instead.
func (*Store_ShopType) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Store_ShopType) GetShopFormat() Store_ShopType_Format {
	if x != nil {
		return x.ShopFormat
	}
	return Store_ShopType_FORMAT_INVALID
}

func (x *Store_ShopType) GetShopSubFormat() Store_ShopType_SubFormat {
	if x != nil {
		return x.ShopSubFormat
	}
	return Store_ShopType_SUB_FORMAT_INVALID
}

// График работы рабочего дня.
type Store_Schedule_WorkDaySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayOfWeek DayOfWeek                                    `protobuf:"varint,1,opt,name=day_of_week,json=dayOfWeek,proto3,enum=citilink.store.store.v1.DayOfWeek" json:"day_of_week,omitempty"`
	Open      *Store_Schedule_WorkDaySchedule_WorkTimePart `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	Close     *Store_Schedule_WorkDaySchedule_WorkTimePart `protobuf:"bytes,3,opt,name=close,proto3" json:"close,omitempty"`
}

func (x *Store_Schedule_WorkDaySchedule) Reset() {
	*x = Store_Schedule_WorkDaySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_Schedule_WorkDaySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Schedule_WorkDaySchedule) ProtoMessage() {}

func (x *Store_Schedule_WorkDaySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Schedule_WorkDaySchedule.ProtoReflect.Descriptor instead.
func (*Store_Schedule_WorkDaySchedule) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Store_Schedule_WorkDaySchedule) GetDayOfWeek() DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return DayOfWeek_DAY_OF_WEEK_INVALID
}

func (x *Store_Schedule_WorkDaySchedule) GetOpen() *Store_Schedule_WorkDaySchedule_WorkTimePart {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Store_Schedule_WorkDaySchedule) GetClose() *Store_Schedule_WorkDaySchedule_WorkTimePart {
	if x != nil {
		return x.Close
	}
	return nil
}

// Время.
type Store_Schedule_WorkDaySchedule_WorkTimePart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour   int32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *Store_Schedule_WorkDaySchedule_WorkTimePart) Reset() {
	*x = Store_Schedule_WorkDaySchedule_WorkTimePart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citilink_store_store_v1_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store_Schedule_WorkDaySchedule_WorkTimePart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store_Schedule_WorkDaySchedule_WorkTimePart) ProtoMessage() {}

func (x *Store_Schedule_WorkDaySchedule_WorkTimePart) ProtoReflect() protoreflect.Message {
	mi := &file_citilink_store_store_v1_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store_Schedule_WorkDaySchedule_WorkTimePart.ProtoReflect.Descriptor instead.
func (*Store_Schedule_WorkDaySchedule_WorkTimePart) Descriptor() ([]byte, []int) {
	return file_citilink_store_store_v1_store_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *Store_Schedule_WorkDaySchedule_WorkTimePart) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Store_Schedule_WorkDaySchedule_WorkTimePart) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

var File_citilink_store_store_v1_store_proto protoreflect.FileDescriptor

var file_citilink_store_store_v1_store_proto_rawDesc = []byte{
	0x0a, 0x23, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x23,
	0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x89, 0x20, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x43, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6b, 0x6c, 0x61, 0x64, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x74, 0x63,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x74,
	0x63, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x59, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x13, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a, 0x30, 0x69, 0x73, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x29, 0x69, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x67, 0x72,
	0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x67, 0x72, 0x6e, 0x12, 0x31, 0x0a,
	0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x62, 0x32, 0x62, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x32, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x32, 0x62, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x6f, 0x72, 0x42, 0x32, 0x62, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36,
	0x0a, 0x18, 0x70, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x75, 0x70, 0x49, 0x64, 0x73, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x69, 0x74,
	0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x70, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x75, 0x70, 0x49, 0x64, 0x4e, 0x61, 0x76, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x69, 0x74, 0x69,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x44, 0x0a, 0x1f, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x69, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x6b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x69, 0x74, 0x69,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x53,
	0x0a, 0x0e, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x1a, 0xce, 0x03, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x54, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x6e,
	0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x1a, 0xc7, 0x02, 0x0a, 0x0f, 0x57,
	0x6f, 0x72, 0x6b, 0x44, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x42,
	0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65,
	0x65, 0x6b, 0x12, 0x58, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x5a, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x69,
	0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0xb5, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x4d, 0x69,
	0x6e, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0xd6, 0x03, 0x0a, 0x08, 0x53, 0x68, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x69, 0x74,
	0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x70,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0x6f, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x03, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x44, 0x49,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x06, 0x22, 0x4a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x03, 0x22, 0x60, 0x0a,
	0x0d, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x48,
	0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x54,
	0x49, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x48, 0x49, 0x50, 0x50,
	0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x50, 0x44, 0x10, 0x02, 0x2a,
	0xd4, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x55,
	0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x59, 0x5f, 0x4f,
	0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x5f, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x46, 0x52, 0x49, 0x44,
	0x41, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x55,
	0x4e, 0x44, 0x41, 0x59, 0x10, 0x07, 0x42, 0x87, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67, 0x6f, 0x2e, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e,
	0x6b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x6b, 0x65,
	0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x63, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x53, 0x53, 0xaa, 0x02, 0x17, 0x43, 0x69, 0x74, 0x69,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x43, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x5c, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23,
	0x43, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x5c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5c, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x43, 0x69, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x6b, 0x3a, 0x3a,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_citilink_store_store_v1_store_proto_rawDescOnce sync.Once
	file_citilink_store_store_v1_store_proto_rawDescData = file_citilink_store_store_v1_store_proto_rawDesc
)

func file_citilink_store_store_v1_store_proto_rawDescGZIP() []byte {
	file_citilink_store_store_v1_store_proto_rawDescOnce.Do(func() {
		file_citilink_store_store_v1_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_citilink_store_store_v1_store_proto_rawDescData)
	})
	return file_citilink_store_store_v1_store_proto_rawDescData
}

var file_citilink_store_store_v1_store_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_citilink_store_store_v1_store_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_citilink_store_store_v1_store_proto_goTypes = []interface{}{
	(DayOfWeek)(0),                                      // 0: citilink.store.store.v1.DayOfWeek
	(Store_Type)(0),                                     // 1: citilink.store.store.v1.Store.Type
	(Store_ShippingAgent)(0),                            // 2: citilink.store.store.v1.Store.ShippingAgent
	(Store_ShopType_Format)(0),                          // 3: citilink.store.store.v1.Store.ShopType.Format
	(Store_ShopType_SubFormat)(0),                       // 4: citilink.store.store.v1.Store.ShopType.SubFormat
	(*Store)(nil),                                       // 5: citilink.store.store.v1.Store
	(*Store_Schedule)(nil),                              // 6: citilink.store.store.v1.Store.Schedule
	(*Store_Address)(nil),                               // 7: citilink.store.store.v1.Store.Address
	(*Store_DeliveryOptions)(nil),                       // 8: citilink.store.store.v1.Store.DeliveryOptions
	(*Store_ShopType)(nil),                              // 9: citilink.store.store.v1.Store.ShopType
	(*Store_Schedule_WorkDaySchedule)(nil),              // 10: citilink.store.store.v1.Store.Schedule.WorkDaySchedule
	(*Store_Schedule_WorkDaySchedule_WorkTimePart)(nil), // 11: citilink.store.store.v1.Store.Schedule.WorkDaySchedule.WorkTimePart
	(*v1.StockInfo_Stock)(nil),                          // 12: citilink.store.stock.v1.StockInfo.Stock
}
var file_citilink_store_store_v1_store_proto_depIdxs = []int32{
	12, // 0: citilink.store.store.v1.Store.linked_stock_in_region:type_name -> citilink.store.stock.v1.StockInfo.Stock
	6,  // 1: citilink.store.store.v1.Store.schedule:type_name -> citilink.store.store.v1.Store.Schedule
	7,  // 2: citilink.store.store.v1.Store.address:type_name -> citilink.store.store.v1.Store.Address
	1,  // 3: citilink.store.store.v1.Store.store_type:type_name -> citilink.store.store.v1.Store.Type
	8,  // 4: citilink.store.store.v1.Store.delivery_options:type_name -> citilink.store.store.v1.Store.DeliveryOptions
	9,  // 5: citilink.store.store.v1.Store.shop_type:type_name -> citilink.store.store.v1.Store.ShopType
	2,  // 6: citilink.store.store.v1.Store.shipping_agent:type_name -> citilink.store.store.v1.Store.ShippingAgent
	10, // 7: citilink.store.store.v1.Store.Schedule.work_days:type_name -> citilink.store.store.v1.Store.Schedule.WorkDaySchedule
	3,  // 8: citilink.store.store.v1.Store.ShopType.shop_format:type_name -> citilink.store.store.v1.Store.ShopType.Format
	4,  // 9: citilink.store.store.v1.Store.ShopType.shop_sub_format:type_name -> citilink.store.store.v1.Store.ShopType.SubFormat
	0,  // 10: citilink.store.store.v1.Store.Schedule.WorkDaySchedule.day_of_week:type_name -> citilink.store.store.v1.DayOfWeek
	11, // 11: citilink.store.store.v1.Store.Schedule.WorkDaySchedule.open:type_name -> citilink.store.store.v1.Store.Schedule.WorkDaySchedule.WorkTimePart
	11, // 12: citilink.store.store.v1.Store.Schedule.WorkDaySchedule.close:type_name -> citilink.store.store.v1.Store.Schedule.WorkDaySchedule.WorkTimePart
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_citilink_store_store_v1_store_proto_init() }
func file_citilink_store_store_v1_store_proto_init() {
	if File_citilink_store_store_v1_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_citilink_store_store_v1_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_DeliveryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_ShopType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_Schedule_WorkDaySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citilink_store_store_v1_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store_Schedule_WorkDaySchedule_WorkTimePart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citilink_store_store_v1_store_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_citilink_store_store_v1_store_proto_goTypes,
		DependencyIndexes: file_citilink_store_store_v1_store_proto_depIdxs,
		EnumInfos:         file_citilink_store_store_v1_store_proto_enumTypes,
		MessageInfos:      file_citilink_store_store_v1_store_proto_msgTypes,
	}.Build()
	File_citilink_store_store_v1_store_proto = out.File
	file_citilink_store_store_v1_store_proto_rawDesc = nil
	file_citilink_store_store_v1_store_proto_goTypes = nil
	file_citilink_store_store_v1_store_proto_depIdxs = nil
}
