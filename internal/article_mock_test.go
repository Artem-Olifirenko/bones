// Code generated by MockGen. DO NOT EDIT.
// Source: article.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleStorage is a mock of ArticleStorage interface.
type MockArticleStorage struct {
	ctrl     *gomock.Controller
	recorder *MockArticleStorageMockRecorder
}

// MockArticleStorageMockRecorder is the mock recorder for MockArticleStorage.
type MockArticleStorageMockRecorder struct {
	mock *MockArticleStorage
}

// NewMockArticleStorage creates a new mock instance.
func NewMockArticleStorage(ctrl *gomock.Controller) *MockArticleStorage {
	mock := &MockArticleStorage{ctrl: ctrl}
	mock.recorder = &MockArticleStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleStorage) EXPECT() *MockArticleStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleStorage) Create(title, content string, category Category, tags []string, isVisible bool) (*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title, content, category, tags, isVisible)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockArticleStorageMockRecorder) Create(title, content, category, tags, isVisible interface{}) *ArticleStorageCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleStorage)(nil).Create), title, content, category, tags, isVisible)
	return &ArticleStorageCreateCall{Call: call}
}

// ArticleStorageCreateCall wrap *gomock.Call
type ArticleStorageCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageCreateCall) Return(arg0 *Article, arg1 error) *ArticleStorageCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageCreateCall) Do(f func(string, string, Category, []string, bool) (*Article, error)) *ArticleStorageCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageCreateCall) DoAndReturn(f func(string, string, Category, []string, bool) (*Article, error)) *ArticleStorageCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockArticleStorage) Delete(id ArticleId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockArticleStorageMockRecorder) Delete(id interface{}) *ArticleStorageDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArticleStorage)(nil).Delete), id)
	return &ArticleStorageDeleteCall{Call: call}
}

// ArticleStorageDeleteCall wrap *gomock.Call
type ArticleStorageDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageDeleteCall) Return(arg0 error) *ArticleStorageDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageDeleteCall) Do(f func(ArticleId) error) *ArticleStorageDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageDeleteCall) DoAndReturn(f func(ArticleId) error) *ArticleStorageDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockArticleStorage) Filter(categories []Category, tags []string, onlyVisible bool) ([]*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", categories, tags, onlyVisible)
	ret0, _ := ret[0].([]*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filter indicates an expected call of Filter.
func (mr *MockArticleStorageMockRecorder) Filter(categories, tags, onlyVisible interface{}) *ArticleStorageFilterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockArticleStorage)(nil).Filter), categories, tags, onlyVisible)
	return &ArticleStorageFilterCall{Call: call}
}

// ArticleStorageFilterCall wrap *gomock.Call
type ArticleStorageFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageFilterCall) Return(arg0 []*Article, arg1 error) *ArticleStorageFilterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageFilterCall) Do(f func([]Category, []string, bool) ([]*Article, error)) *ArticleStorageFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageFilterCall) DoAndReturn(f func([]Category, []string, bool) ([]*Article, error)) *ArticleStorageFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockArticleStorage) Get(id ArticleId) (*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArticleStorageMockRecorder) Get(id interface{}) *ArticleStorageGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleStorage)(nil).Get), id)
	return &ArticleStorageGetCall{Call: call}
}

// ArticleStorageGetCall wrap *gomock.Call
type ArticleStorageGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageGetCall) Return(arg0 *Article, arg1 error) *ArticleStorageGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageGetCall) Do(f func(ArticleId) (*Article, error)) *ArticleStorageGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageGetCall) DoAndReturn(f func(ArticleId) (*Article, error)) *ArticleStorageGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockArticleStorage) Update(id ArticleId, title, content string, category Category, tags []string, isVisible bool) (*Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, title, content, category, tags, isVisible)
	ret0, _ := ret[0].(*Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockArticleStorageMockRecorder) Update(id, title, content, category, tags, isVisible interface{}) *ArticleStorageUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleStorage)(nil).Update), id, title, content, category, tags, isVisible)
	return &ArticleStorageUpdateCall{Call: call}
}

// ArticleStorageUpdateCall wrap *gomock.Call
type ArticleStorageUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ArticleStorageUpdateCall) Return(arg0 *Article, arg1 error) *ArticleStorageUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ArticleStorageUpdateCall) Do(f func(ArticleId, string, string, Category, []string, bool) (*Article, error)) *ArticleStorageUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ArticleStorageUpdateCall) DoAndReturn(f func(ArticleId, string, string, Category, []string, bool) (*Article, error)) *ArticleStorageUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
